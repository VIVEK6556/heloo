{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HTMLTestRunner HTMLTestRunner for python3 A TestRunner for use with the Python unit testing framework. It generates a HTML report to show the result at a glance. It logs stdout to *.txt file with timestamp Easy to find bugs Installation: pip install HTMLTestRunner-rv Creating suite my_test_suite = unittest.TestSuite() output to a file runner = HTMLTestRunner( title='My unit test', open_in_browser=True) run the test runner.run(my_test_suite) Example code: import unittest from test_print_all_details import TestCasePrintAllDetails from test_by_id import TestCaseDetailsById from test_details_by_name import TestCaseDetailsByNmae from HTMLTestRunner import HTMLTestRunner def test_suite(): test1 = unittest.TestLoader().loadTestsFromTestCase(TestCasePrintAllDetails) test2 = unittest.TestLoader().loadTestsFromTestCase(TestCaseDetailsById) test3 = unittest.TestLoader().loadTestsFromTestCase(TestCaseDetailsByNmae) suite = unittest.TestSuite([test1,test2,test3]) runner = HTMLTestRunner(log=True, verbosity=2, output='report', title='Test report', report_name='report', open_in_browser=True, description=\"HTMLTestReport\") runner.run(suite) if __name__ == '__main__': test_suite()","title":"Home"},{"location":"#htmltestrunner","text":"HTMLTestRunner for python3 A TestRunner for use with the Python unit testing framework. It generates a HTML report to show the result at a glance. It logs stdout to *.txt file with timestamp Easy to find bugs","title":"HTMLTestRunner"},{"location":"#installation","text":"pip install HTMLTestRunner-rv","title":"Installation:"},{"location":"#creating-suite","text":"my_test_suite = unittest.TestSuite()","title":"Creating suite"},{"location":"#output-to-a-file","text":"runner = HTMLTestRunner( title='My unit test', open_in_browser=True)","title":"output to a file"},{"location":"#run-the-test","text":"runner.run(my_test_suite)","title":"run the test"},{"location":"#example-code","text":"import unittest from test_print_all_details import TestCasePrintAllDetails from test_by_id import TestCaseDetailsById from test_details_by_name import TestCaseDetailsByNmae from HTMLTestRunner import HTMLTestRunner def test_suite(): test1 = unittest.TestLoader().loadTestsFromTestCase(TestCasePrintAllDetails) test2 = unittest.TestLoader().loadTestsFromTestCase(TestCaseDetailsById) test3 = unittest.TestLoader().loadTestsFromTestCase(TestCaseDetailsByNmae) suite = unittest.TestSuite([test1,test2,test3]) runner = HTMLTestRunner(log=True, verbosity=2, output='report', title='Test report', report_name='report', open_in_browser=True, description=\"HTMLTestReport\") runner.run(suite) if __name__ == '__main__': test_suite()","title":"Example code:"},{"location":"about/","text":"HTMLTestRunner HTMLTestRunner for python3 A TestRunner for use with the Python unit testing framework. It generates a HTML report to show the result at a glance. It logs stdout to *.txt file with timestamp Easy to find bugs Installation: pip install HTMLTestRunner-rv Creating suite my_test_suite = unittest.TestSuite() output to a file runner = HTMLTestRunner( title='My unit test', open_in_browser=True) run the test runner.run(my_test_suite) Example code: import unittest from test_print_all_details import TestCasePrintAllDetails from test_by_id import TestCaseDetailsById from test_details_by_name import TestCaseDetailsByNmae from HTMLTestRunner import HTMLTestRunner def test_suite(): test1 = unittest.TestLoader().loadTestsFromTestCase(TestCasePrintAllDetails) test2 = unittest.TestLoader().loadTestsFromTestCase(TestCaseDetailsById) test3 = unittest.TestLoader().loadTestsFromTestCase(TestCaseDetailsByNmae) suite = unittest.TestSuite([test1,test2,test3]) runner = HTMLTestRunner(log=True, verbosity=2, output='report', title='Test report', report_name='report', open_in_browser=True, description=\"HTMLTestReport\") runner.run(suite) if __name__ == '__main__': test_suite()","title":"About"},{"location":"about/#htmltestrunner","text":"HTMLTestRunner for python3 A TestRunner for use with the Python unit testing framework. It generates a HTML report to show the result at a glance. It logs stdout to *.txt file with timestamp Easy to find bugs","title":"HTMLTestRunner"},{"location":"about/#installation","text":"pip install HTMLTestRunner-rv","title":"Installation:"},{"location":"about/#creating-suite","text":"my_test_suite = unittest.TestSuite()","title":"Creating suite"},{"location":"about/#output-to-a-file","text":"runner = HTMLTestRunner( title='My unit test', open_in_browser=True)","title":"output to a file"},{"location":"about/#run-the-test","text":"runner.run(my_test_suite)","title":"run the test"},{"location":"about/#example-code","text":"import unittest from test_print_all_details import TestCasePrintAllDetails from test_by_id import TestCaseDetailsById from test_details_by_name import TestCaseDetailsByNmae from HTMLTestRunner import HTMLTestRunner def test_suite(): test1 = unittest.TestLoader().loadTestsFromTestCase(TestCasePrintAllDetails) test2 = unittest.TestLoader().loadTestsFromTestCase(TestCaseDetailsById) test3 = unittest.TestLoader().loadTestsFromTestCase(TestCaseDetailsByNmae) suite = unittest.TestSuite([test1,test2,test3]) runner = HTMLTestRunner(log=True, verbosity=2, output='report', title='Test report', report_name='report', open_in_browser=True, description=\"HTMLTestReport\") runner.run(suite) if __name__ == '__main__': test_suite()","title":"Example code:"},{"location":"api-documentation/","text":"HTMLTestRunner-rv HTMLTestRunner.runner to_unicode to_unicode(s) It strings to unicode Arguments : s str - String to convert to unicode Returns : It returns unicode OutputRedirector Objects class OutputRedirector(object) Wrapper to redirect stdout or stderr __init__ __init__(fp) Wrapper to redirect stdout or stderr Arguments : fp buffer - Buffer to store stdout write write(s) Write to string buffer with timestamp Arguments : s str - String to write to buffer Returns : It returns None writelines writelines(lines) It write number lines to buffer Arguments : lines list - List of lines to write to buffer Returns : flush flush() It flushes string buffer Returns : _TestResult Objects class _TestResult(TestResult) __init__ __init__(verbosity=1, log_file='') It generates test result Arguments : verbosity int - If verbosity > 1 it logs all details log_file file - File name to log the stdout logs startTest | startTest(test) Start test inherited by unittest TestResult. It changes stdout buffer to self.outputBuffer Arguments : test : Test object to do test Returns : complete_output complete_output() It disconnects self.outputBuffer from stdout and replaces with sys.stdout = sys.__stdout__ , sys.stderr = sys.__stderr__ writes buffer data to log file if self.log_file is True Returns : It returns buffer output stopTest stopTest(test) Calls addSuccess() if testcase passed. Calls addError() if gets error while testing. Calls addFailure() if test has failed. It disconnects self.outputBuffer from stdout and replaces with sys.__stdout__ Arguments : test - Testcase to stop after it runs Returns : addSuccess addSuccess(test) It override method of class unittest.TestResult It writes P in console Arguments : test - Testcase Returns : addError addError(test, err) It override method of class unittest.TestResult It writes E in console Arguments : test - Testcase Returns : addFailure addFailure(test, err) It override method of class unittest.TestResult It writes F in console Arguments : test - TestCase Returns : HTMLTestRunner Objects class HTMLTestRunner() __init__ __init__(log=None, output=None, verbosity=1, title=None, description=None, report_name='report', open_in_browser=False) HTMLTestRunner Arguments : self HTMLTestRunner - Object of HTMLTestRunner log bool - If True it logs print buffer to *.txt file with timestamp output str - Report output dir name verbosity int - If verbosity > 1 it prints brief summary of testcases in console title str - Title of the Test Report description str - Description of Test Report report_name str - Starting name of Test report and log file open_in_browser bool - If True it opens report in browser automatically Returns : Runner object run run(test) Run the Test Case Arguments : test - Test Case Returns : It returns result sortResult sortResult(result_list) It sorts the Testcases to run Arguments : result_list list - Results list Returns : Returns sorted result list getReportAttributes getReportAttributes(result) Return report attributes as a list of (name, value). Override this to add custom attributes. generateReport generateReport(result) It geneartes HTML report by using unittest report @param result:unittest result After generates html report it opens report in browser if open_in_broser is True It adds stylesheet and script files in reports directory","title":"HTMLTestRunner"},{"location":"api-documentation/#htmltestrunner-rv","text":"","title":"HTMLTestRunner-rv"},{"location":"api-documentation/#htmltestrunnerrunner","text":"","title":"HTMLTestRunner.runner"},{"location":"api-documentation/#to_unicode","text":"to_unicode(s) It strings to unicode Arguments : s str - String to convert to unicode Returns : It returns unicode","title":"to_unicode"},{"location":"api-documentation/#outputredirector-objects","text":"class OutputRedirector(object) Wrapper to redirect stdout or stderr","title":"OutputRedirector Objects"},{"location":"api-documentation/#__init__","text":"__init__(fp) Wrapper to redirect stdout or stderr Arguments : fp buffer - Buffer to store stdout","title":"__init__"},{"location":"api-documentation/#write","text":"write(s) Write to string buffer with timestamp Arguments : s str - String to write to buffer Returns : It returns None","title":"write"},{"location":"api-documentation/#writelines","text":"writelines(lines) It write number lines to buffer Arguments : lines list - List of lines to write to buffer Returns :","title":"writelines"},{"location":"api-documentation/#flush","text":"flush() It flushes string buffer Returns :","title":"flush"},{"location":"api-documentation/#_testresult-objects","text":"class _TestResult(TestResult)","title":"_TestResult Objects"},{"location":"api-documentation/#__init___1","text":"__init__(verbosity=1, log_file='') It generates test result Arguments : verbosity int - If verbosity > 1 it logs all details log_file file - File name to log the stdout logs","title":"__init__"},{"location":"api-documentation/#starttest","text":"| startTest(test) Start test inherited by unittest TestResult. It changes stdout buffer to self.outputBuffer Arguments : test : Test object to do test Returns :","title":"startTest"},{"location":"api-documentation/#complete_output","text":"complete_output() It disconnects self.outputBuffer from stdout and replaces with sys.stdout = sys.__stdout__ , sys.stderr = sys.__stderr__ writes buffer data to log file if self.log_file is True Returns : It returns buffer output","title":"complete_output"},{"location":"api-documentation/#stoptest","text":"stopTest(test) Calls addSuccess() if testcase passed. Calls addError() if gets error while testing. Calls addFailure() if test has failed. It disconnects self.outputBuffer from stdout and replaces with sys.__stdout__ Arguments : test - Testcase to stop after it runs Returns :","title":"stopTest"},{"location":"api-documentation/#addsuccess","text":"addSuccess(test) It override method of class unittest.TestResult It writes P in console Arguments : test - Testcase Returns :","title":"addSuccess"},{"location":"api-documentation/#adderror","text":"addError(test, err) It override method of class unittest.TestResult It writes E in console Arguments : test - Testcase Returns :","title":"addError"},{"location":"api-documentation/#addfailure","text":"addFailure(test, err) It override method of class unittest.TestResult It writes F in console Arguments : test - TestCase Returns :","title":"addFailure"},{"location":"api-documentation/#htmltestrunner-objects","text":"class HTMLTestRunner()","title":"HTMLTestRunner Objects"},{"location":"api-documentation/#__init___2","text":"__init__(log=None, output=None, verbosity=1, title=None, description=None, report_name='report', open_in_browser=False) HTMLTestRunner Arguments : self HTMLTestRunner - Object of HTMLTestRunner log bool - If True it logs print buffer to *.txt file with timestamp output str - Report output dir name verbosity int - If verbosity > 1 it prints brief summary of testcases in console title str - Title of the Test Report description str - Description of Test Report report_name str - Starting name of Test report and log file open_in_browser bool - If True it opens report in browser automatically Returns : Runner object","title":"__init__"},{"location":"api-documentation/#run","text":"run(test) Run the Test Case Arguments : test - Test Case Returns : It returns result","title":"run"},{"location":"api-documentation/#sortresult","text":"sortResult(result_list) It sorts the Testcases to run Arguments : result_list list - Results list Returns : Returns sorted result list","title":"sortResult"},{"location":"api-documentation/#getreportattributes","text":"getReportAttributes(result) Return report attributes as a list of (name, value). Override this to add custom attributes.","title":"getReportAttributes"},{"location":"api-documentation/#generatereport","text":"generateReport(result) It geneartes HTML report by using unittest report @param result:unittest result After generates html report it opens report in browser if open_in_broser is True It adds stylesheet and script files in reports directory","title":"generateReport"},{"location":"tutorial/","text":"Getting Started Installation of HTMLTestRunner-rv pip install HTMLTestRunner-rv Importing HTMLTestRunner from HTMLTestRunner import HTMLTestRunner Import unittest import unittest import your testcase classes from testcase_file1 import TestCase1 from testcase_file2 import TestCase2 Create suite test1 = unittest.TestLoader().loadTestsFromTestCase(TestCase1) test2 = unittest.TestLoader().loadTestsFromTestCase(TestCase2) suite = unittest.TestSuite([test1, test2]) Create Runner runner = HTMLTestRunner(log=True, verbosity=2, output='report', title='Test report', report_name='report', open_in_browser=True, description=\"HTMLTestReport\") runner.run(suite) GOOD LUCK!!","title":"Tutorial"},{"location":"tutorial/#getting-started","text":"","title":"Getting Started"},{"location":"tutorial/#installation-of-htmltestrunner-rv","text":"pip install HTMLTestRunner-rv","title":"Installation of HTMLTestRunner-rv"},{"location":"tutorial/#importing-htmltestrunner","text":"from HTMLTestRunner import HTMLTestRunner","title":"Importing HTMLTestRunner"},{"location":"tutorial/#import-unittest","text":"import unittest","title":"Import unittest"},{"location":"tutorial/#import-your-testcase-classes","text":"from testcase_file1 import TestCase1 from testcase_file2 import TestCase2","title":"import your testcase classes"},{"location":"tutorial/#create-suite","text":"test1 = unittest.TestLoader().loadTestsFromTestCase(TestCase1) test2 = unittest.TestLoader().loadTestsFromTestCase(TestCase2) suite = unittest.TestSuite([test1, test2])","title":"Create suite"},{"location":"tutorial/#create-runner","text":"runner = HTMLTestRunner(log=True, verbosity=2, output='report', title='Test report', report_name='report', open_in_browser=True, description=\"HTMLTestReport\") runner.run(suite)","title":"Create Runner"},{"location":"tutorial/#good-luck","text":"","title":"GOOD LUCK!!"}]}