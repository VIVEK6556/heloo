{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HTMLTestRunner HTMLTestRunner for python3 A TestRunner for use with the Python unit testing framework. It generates a HTML report to show the result at a glance. It logs stdout to *.txt file with timestamp Easy to find bugs Click here for HTMLTestRunner-rv documentation Installation: pip install HTMLTestRunner-rv Creating suite my_test_suite = unittest.TestSuite() output to a file runner = HTMLTestRunner( title='My unit test', open_in_browser=True) run the test runner.run(my_test_suite) Example code: import unittest from test_print_all_details import TestCasePrintAllDetails from test_by_id import TestCaseDetailsById from test_details_by_name import TestCaseDetailsByNmae from HTMLTestRunner import HTMLTestRunner def test_suite(): test1 = unittest.TestLoader().loadTestsFromTestCase(TestCasePrintAllDetails) test2 = unittest.TestLoader().loadTestsFromTestCase(TestCaseDetailsById) test3 = unittest.TestLoader().loadTestsFromTestCase(TestCaseDetailsByNmae) suite = unittest.TestSuite([test1,test2,test3]) runner = HTMLTestRunner(log=True, verbosity=2, output='report', title='Test report', report_name='report', open_in_browser=True, description=\"HTMLTestReport\") runner.run(suite) if __name__ == '__main__': test_suite() Now you can pass external css styling and javascript for report Example: style = \"\"\" .heading { margin-top: 0ex; margin-bottom: 1ex; border-style:ridge; color:white; background-color:#999900; font-weight:bold; } \"\"\" script = \"\"\" Your script \"\"\" runner = HTMLTestRunner(log=True, verbosity=2, output='report', title='Test report', report_name='report', open_in_browser=True, description=\"HTMLTestReport\", script=script, style=style)","title":"Home"},{"location":"#htmltestrunner","text":"HTMLTestRunner for python3 A TestRunner for use with the Python unit testing framework. It generates a HTML report to show the result at a glance. It logs stdout to *.txt file with timestamp Easy to find bugs","title":"HTMLTestRunner"},{"location":"#click-here-for-htmltestrunner-rv-documentation","text":"","title":" Click here for HTMLTestRunner-rv documentation"},{"location":"#installation","text":"pip install HTMLTestRunner-rv","title":"Installation:"},{"location":"#creating-suite","text":"my_test_suite = unittest.TestSuite()","title":"Creating suite"},{"location":"#output-to-a-file","text":"runner = HTMLTestRunner( title='My unit test', open_in_browser=True)","title":"output to a file"},{"location":"#run-the-test","text":"runner.run(my_test_suite)","title":"run the test"},{"location":"#example-code","text":"import unittest from test_print_all_details import TestCasePrintAllDetails from test_by_id import TestCaseDetailsById from test_details_by_name import TestCaseDetailsByNmae from HTMLTestRunner import HTMLTestRunner def test_suite(): test1 = unittest.TestLoader().loadTestsFromTestCase(TestCasePrintAllDetails) test2 = unittest.TestLoader().loadTestsFromTestCase(TestCaseDetailsById) test3 = unittest.TestLoader().loadTestsFromTestCase(TestCaseDetailsByNmae) suite = unittest.TestSuite([test1,test2,test3]) runner = HTMLTestRunner(log=True, verbosity=2, output='report', title='Test report', report_name='report', open_in_browser=True, description=\"HTMLTestReport\") runner.run(suite) if __name__ == '__main__': test_suite()","title":"Example code:"},{"location":"#now-you-can-pass-external-css-styling-and-javascript-for-report","text":"","title":"Now you can pass external css styling and javascript for report"},{"location":"#example","text":"style = \"\"\" .heading { margin-top: 0ex; margin-bottom: 1ex; border-style:ridge; color:white; background-color:#999900; font-weight:bold; } \"\"\" script = \"\"\" Your script \"\"\" runner = HTMLTestRunner(log=True, verbosity=2, output='report', title='Test report', report_name='report', open_in_browser=True, description=\"HTMLTestReport\", script=script, style=style)","title":"Example:"},{"location":"about/","text":"HTMLTestRunner HTMLTestRunner for python3 A TestRunner for use with the Python unit testing framework. It generates a HTML report to show the result at a glance. It logs stdout to *.txt file with timestamp Easy to find bugs Click here for HTMLTestRunner-rv documentation Installation: pip install HTMLTestRunner-rv Creating suite my_test_suite = unittest.TestSuite() output to a file runner = HTMLTestRunner( title='My unit test', open_in_browser=True) run the test runner.run(my_test_suite) Example code: import unittest from test_print_all_details import TestCasePrintAllDetails from test_by_id import TestCaseDetailsById from test_details_by_name import TestCaseDetailsByNmae from HTMLTestRunner import HTMLTestRunner def test_suite(): test1 = unittest.TestLoader().loadTestsFromTestCase(TestCasePrintAllDetails) test2 = unittest.TestLoader().loadTestsFromTestCase(TestCaseDetailsById) test3 = unittest.TestLoader().loadTestsFromTestCase(TestCaseDetailsByNmae) suite = unittest.TestSuite([test1,test2,test3]) runner = HTMLTestRunner(log=True, verbosity=2, output='report', title='Test report', report_name='report', open_in_browser=True, description=\"HTMLTestReport\") runner.run(suite) if __name__ == '__main__': test_suite() Now you can pass external css styling and javascript for report Example: style = \"\"\" .heading { margin-top: 0ex; margin-bottom: 1ex; border-style:ridge; color:white; background-color:#999900; font-weight:bold; } \"\"\" script = \"\"\" Your script \"\"\" runner = HTMLTestRunner(log=True, verbosity=2, output='report', title='Test report', report_name='report', open_in_browser=True, description=\"HTMLTestReport\", script=script, style=style)","title":"About"},{"location":"about/#htmltestrunner","text":"HTMLTestRunner for python3 A TestRunner for use with the Python unit testing framework. It generates a HTML report to show the result at a glance. It logs stdout to *.txt file with timestamp Easy to find bugs","title":"HTMLTestRunner"},{"location":"about/#click-here-for-htmltestrunner-rv-documentation","text":"","title":" Click here for HTMLTestRunner-rv documentation"},{"location":"about/#installation","text":"pip install HTMLTestRunner-rv","title":"Installation:"},{"location":"about/#creating-suite","text":"my_test_suite = unittest.TestSuite()","title":"Creating suite"},{"location":"about/#output-to-a-file","text":"runner = HTMLTestRunner( title='My unit test', open_in_browser=True)","title":"output to a file"},{"location":"about/#run-the-test","text":"runner.run(my_test_suite)","title":"run the test"},{"location":"about/#example-code","text":"import unittest from test_print_all_details import TestCasePrintAllDetails from test_by_id import TestCaseDetailsById from test_details_by_name import TestCaseDetailsByNmae from HTMLTestRunner import HTMLTestRunner def test_suite(): test1 = unittest.TestLoader().loadTestsFromTestCase(TestCasePrintAllDetails) test2 = unittest.TestLoader().loadTestsFromTestCase(TestCaseDetailsById) test3 = unittest.TestLoader().loadTestsFromTestCase(TestCaseDetailsByNmae) suite = unittest.TestSuite([test1,test2,test3]) runner = HTMLTestRunner(log=True, verbosity=2, output='report', title='Test report', report_name='report', open_in_browser=True, description=\"HTMLTestReport\") runner.run(suite) if __name__ == '__main__': test_suite()","title":"Example code:"},{"location":"about/#now-you-can-pass-external-css-styling-and-javascript-for-report","text":"","title":"Now you can pass external css styling and javascript for report"},{"location":"about/#example","text":"style = \"\"\" .heading { margin-top: 0ex; margin-bottom: 1ex; border-style:ridge; color:white; background-color:#999900; font-weight:bold; } \"\"\" script = \"\"\" Your script \"\"\" runner = HTMLTestRunner(log=True, verbosity=2, output='report', title='Test report', report_name='report', open_in_browser=True, description=\"HTMLTestReport\", script=script, style=style)","title":"Example:"},{"location":"api-documentation/","text":"module runner HTMLTestRunner-rv module to generate HTML report for your testcase ================================================================== The HTMLTestRunner provides easy way to generate HTML Test Reports. Easy to find errors and reduce the debug time. You no need to see console to see the debug messages, it logs every print logs in to *.txt with timestamp. So it is easy to debug whenever you want. It automatically opens report in your browser so no need to search report file in your directory. Just you need to pass open_in_browser = True . Color of Testcase block automatically change as per test result. You can add your custom style Eg: style = \"CSS styling\" You can add your custom script Eg: script = \"javascript\" Global Variables stdout_redirector stderr_redirector STATUS DEFAULT_TITLE DEFAULT_DESCRIPTION PKG_PATH function to_string to_string(s) It convert strings to unicode Args: s (str,byte): String to convert to unicode Returns: It returns unicode class OutputRedirector Wrapper to redirect stdout or stderr method __init__ __init__(fp) Wrapper to redirect stdout or stderr Args: fp (buffer): Buffer to store stdout method flush flush() It flushes string buffer Returns: method write write(s) Write to string buffer with timestamp Args: s (str): String to write to buffer Returns: It returns None method writelines writelines(lines) It write number lines to buffer Args: lines (list): List of lines to write to buffer Returns: class HTMLTestRunner method __init__ __init__( log=None, output=None, verbosity=1, title=None, description=None, style='', script='', report_name='report', open_in_browser=False, tested_by='Unknown' ) HTMLTestRunner Args: self (HTMLTestRunner): Object of HTMLTestRunner log (bool): If True it logs print buffer to *.txt file with timestamp output (str): Report output dir name verbosity (int): If verbosity > 1 it prints brief summary of testcases in console title (str): Title of the Test Report description (str): Description of Test Report style (str): Custom style for report script (str): Custom script for report report_name (str): Starting name of Test report and log file open_in_browser (bool): If True it opens report in browser automatically Returns: Runner object method generate_report generate_report(result) It geneartes HTML report by using unittest report @param result:unittest result After generates html report it opens report in browser if open_in_broser is True It adds stylesheet and script files in reports directory method get_report_attributes get_report_attributes(result) Return report attributes as a list of (name, value). Override this to add custom attributes. method run run(test) Run the Test Case Args: test : Test Case Returns: It returns result method sort_result sort_result(result_list) It sorts the Testcases to run Args: result_list (list): Results list Returns: Returns sorted result list This file was automatically generated via lazydocs .","title":"HTMLTestRunner"},{"location":"api-documentation/#module-runner","text":"HTMLTestRunner-rv module to generate HTML report for your testcase ================================================================== The HTMLTestRunner provides easy way to generate HTML Test Reports. Easy to find errors and reduce the debug time. You no need to see console to see the debug messages, it logs every print logs in to *.txt with timestamp. So it is easy to debug whenever you want. It automatically opens report in your browser so no need to search report file in your directory. Just you need to pass open_in_browser = True . Color of Testcase block automatically change as per test result. You can add your custom style Eg: style = \"CSS styling\" You can add your custom script Eg: script = \"javascript\"","title":"module runner"},{"location":"api-documentation/#global-variables","text":"stdout_redirector stderr_redirector STATUS DEFAULT_TITLE DEFAULT_DESCRIPTION PKG_PATH","title":"Global Variables"},{"location":"api-documentation/#function-to_string","text":"to_string(s) It convert strings to unicode Args: s (str,byte): String to convert to unicode Returns: It returns unicode","title":"function to_string"},{"location":"api-documentation/#class-outputredirector","text":"Wrapper to redirect stdout or stderr","title":"class OutputRedirector"},{"location":"api-documentation/#method-__init__","text":"__init__(fp) Wrapper to redirect stdout or stderr Args: fp (buffer): Buffer to store stdout","title":"method __init__"},{"location":"api-documentation/#method-flush","text":"flush() It flushes string buffer Returns:","title":"method flush"},{"location":"api-documentation/#method-write","text":"write(s) Write to string buffer with timestamp Args: s (str): String to write to buffer Returns: It returns None","title":"method write"},{"location":"api-documentation/#method-writelines","text":"writelines(lines) It write number lines to buffer Args: lines (list): List of lines to write to buffer Returns:","title":"method writelines"},{"location":"api-documentation/#class-htmltestrunner","text":"","title":"class HTMLTestRunner"},{"location":"api-documentation/#method-__init___1","text":"__init__( log=None, output=None, verbosity=1, title=None, description=None, style='', script='', report_name='report', open_in_browser=False, tested_by='Unknown' ) HTMLTestRunner Args: self (HTMLTestRunner): Object of HTMLTestRunner log (bool): If True it logs print buffer to *.txt file with timestamp output (str): Report output dir name verbosity (int): If verbosity > 1 it prints brief summary of testcases in console title (str): Title of the Test Report description (str): Description of Test Report style (str): Custom style for report script (str): Custom script for report report_name (str): Starting name of Test report and log file open_in_browser (bool): If True it opens report in browser automatically Returns: Runner object","title":"method __init__"},{"location":"api-documentation/#method-generate_report","text":"generate_report(result) It geneartes HTML report by using unittest report @param result:unittest result After generates html report it opens report in browser if open_in_broser is True It adds stylesheet and script files in reports directory","title":"method generate_report"},{"location":"api-documentation/#method-get_report_attributes","text":"get_report_attributes(result) Return report attributes as a list of (name, value). Override this to add custom attributes.","title":"method get_report_attributes"},{"location":"api-documentation/#method-run","text":"run(test) Run the Test Case Args: test : Test Case Returns: It returns result","title":"method run"},{"location":"api-documentation/#method-sort_result","text":"sort_result(result_list) It sorts the Testcases to run Args: result_list (list): Results list Returns: Returns sorted result list This file was automatically generated via lazydocs .","title":"method sort_result"},{"location":"tutorial/","text":"Getting Started Installation of HTMLTestRunner-rv pip install HTMLTestRunner-rv Importing HTMLTestRunner from HTMLTestRunner import HTMLTestRunner Import unittest import unittest import your testcase classes from testcase_file1 import TestCase1 from testcase_file2 import TestCase2 Create suite test1 = unittest.TestLoader().loadTestsFromTestCase(TestCase1) test2 = unittest.TestLoader().loadTestsFromTestCase(TestCase2) suite = unittest.TestSuite([test1, test2]) Create Runner runner = HTMLTestRunner(log=True, verbosity=2, output='report', title='Test report', report_name='report', open_in_browser=True, description=\"HTMLTestReport\") runner.run(suite) GOOD LUCK!!","title":"Tutorial"},{"location":"tutorial/#getting-started","text":"","title":"Getting Started"},{"location":"tutorial/#installation-of-htmltestrunner-rv","text":"pip install HTMLTestRunner-rv","title":"Installation of HTMLTestRunner-rv"},{"location":"tutorial/#importing-htmltestrunner","text":"from HTMLTestRunner import HTMLTestRunner","title":"Importing HTMLTestRunner"},{"location":"tutorial/#import-unittest","text":"import unittest","title":"Import unittest"},{"location":"tutorial/#import-your-testcase-classes","text":"from testcase_file1 import TestCase1 from testcase_file2 import TestCase2","title":"import your testcase classes"},{"location":"tutorial/#create-suite","text":"test1 = unittest.TestLoader().loadTestsFromTestCase(TestCase1) test2 = unittest.TestLoader().loadTestsFromTestCase(TestCase2) suite = unittest.TestSuite([test1, test2])","title":"Create suite"},{"location":"tutorial/#create-runner","text":"runner = HTMLTestRunner(log=True, verbosity=2, output='report', title='Test report', report_name='report', open_in_browser=True, description=\"HTMLTestReport\") runner.run(suite)","title":"Create Runner"},{"location":"tutorial/#good-luck","text":"","title":"GOOD LUCK!!"}]}